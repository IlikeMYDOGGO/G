
game.Players.LocalPlayer.CharacterAdded:Connect(function()
	repeat wait() until game.Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart")
	-- MADE BY KRUGKREW
	-- MODIFIED BY CREYSOUND



	--game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(0, 100, 225)
	for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
		if tool:IsA("Tool") then
			tool.Parent = game.Players.LocalPlayer.Character
		end
	end

	if workspace:FindFirstChild("ActivePlayers") then
	else
		local playersonworkspace = Instance.new("Folder", workspace)
		playersonworkspace.Name = "ActivePlayers"
		game:GetService("RunService").Heartbeat:Connect(function()
			for i,v in pairs(workspace:GetChildren()) do
				if v:IsA("Model") then
					if v:FindFirstChild("Humanoid") then
						v.Parent = playersonworkspace
					end
				end
			end
		end)
	end

	if workspace:FindFirstChild("Filter") then
	else
		local Filter = Instance.new("Folder", workspace)
		Filter.Name = "Filter"
	end



	local Funcs = {}

--[[Funcs.VisualizePosition = function(Position)
	local Part = Instance.new("Part")
	Part.Position = Position
	Part.CanCollide = false
	Part.Parent = Filter
	Part.Size = Vector3.new(0.1,0.1,0.1)
	Part.Anchored = true
end
]]

	Funcs.GetDist = function(Model, Position)
		return (Model["Right Arm"].Position - Position).Magnitude
	end

	Funcs.GetClosestEnemy = function(Model)
		local ClosestEnemy = nil
		local ClosestDistance = math.huge
		for i, v in pairs(workspace.ActivePlayers:GetChildren()) do 
			if v ~= Model then
				if v.Humanoid.Health ~= 0 then
					local Dist = (v.HumanoidRootPart.Position - Model.HumanoidRootPart.Position).Magnitude
					if Dist < ClosestDistance then
						ClosestDistance = Dist
						ClosestEnemy = v
					end
				end
			end
		end

		warn(ClosestEnemy.Name.." is my enemy now!!!")
		return ClosestEnemy
	end

	Funcs.GetDistance = function (Model, OtherModel)
		return (Model.HumanoidRootPart.Position - OtherModel.HumanoidRootPart.Position).Magnitude
	end

	Funcs.GetClosestPart = function(Position, OtherModel)
		local ClosestPart = nil
		local ClosestDistance = math.huge
		for i,v in pairs(OtherModel:GetChildren()) do 
			if v:IsA("BasePart") then 
				local Offset = Vector3.new(0,0,0)
				if v.Name == "Right Arm" then 

					Offset = OtherModel.HumanoidRootPart.CFrame.LookVector*3
				end

				local Dist = (Position - (v.Position+Offset)).Magnitude
				if Dist < ClosestDistance then
					ClosestDistance = Dist
					ClosestPart = v
				end
			end
		end

		return ClosestPart
	end

	Funcs.GetRetreatDirection = function(Model, ClosestEnemy, Dist)
		local Difference = (Model.HumanoidRootPart.Position - ClosestEnemy.HumanoidRootPart.Position)
		local Params = RaycastParams.new()
		Params.FilterType = Enum.RaycastFilterType.Blacklist
		Params.FilterDescendantsInstances = {workspace.ActivePlayers}
		-- must be 10 for now otherwise it might run towards the player
		-- maybe increase to 100 when the closest hit is <10? that way it knows when it's getting cornered
		--local Dist = 10 
		local Angle = -135
		local BestDist = 0
		local BestPosition = nil
		local Raycasts = 10
		for i = 1, Raycasts do
			local Raycast = workspace:Raycast(Model.HumanoidRootPart.Position, (CFrame.lookAt(Model.HumanoidRootPart.Position, Model.HumanoidRootPart.Position + Difference)*CFrame.Angles(0,math.rad(Angle),0)).LookVector*Dist, Params)

			if Raycast then 
				local Dist = (Raycast.Position - ClosestEnemy.HumanoidRootPart.Position).Magnitude
				if Dist > BestDist then 
					BestPosition = Raycast.Position
					BestDist = Dist
				end
			end

			Angle += 270/Raycasts

		end

		return BestPosition
	end

	Funcs.SideCast = function(ClosestEnemy)
		local Params = RaycastParams.new()
		Params.FilterType = Enum.RaycastFilterType.Blacklist
		Params.FilterDescendantsInstances = {workspace.ActivePlayers}
		local Angle = 0
		local BestDist = 0
		local BestPosition = nil
		local Raycasts = 10
		for i = 1,Raycasts do 
			local Raycast = workspace:Raycast(ClosestEnemy.HumanoidRootPart.Position, (ClosestEnemy.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(Angle),0)).LookVector*8, Params)
			Angle += 360/Raycasts
			if Raycast then 
				return Raycast
			end
		end


	end

	--FindBestAngle

	local VisualizePosition = function(Position)
		local Part = Instance.new("Part")
		Part.Position = Position
		Part.CanCollide = false
		Part.Parent = Filter
		Part.Size = Vector3.new(0.1,0.1,0.1)
		Part.Anchored = true
	end

	local function GetDist(Model, Position)
		return (Model["Right Arm"].Position - Position).Magnitude
	end

	Funcs.FindBestAngle = function(Model, Enemy, EnemyTool)

		local Params = RaycastParams.new()
		Params.FilterType = Enum.RaycastFilterType.Blacklist
		Params.FilterDescendantsInstances = {Model, workspace.Filter, EnemyTool, table.unpack(Enemy.Humanoid:GetAccessories()), workspace}

		local Raycasts = {}
		table.insert(Raycasts, {workspace:Raycast(Model["Right Arm"].Position, Model.HumanoidRootPart.CFrame.LookVector*10, Params), 0})
		table.insert(Raycasts, {workspace:Raycast(Model["Right Arm"].Position, (Model.HumanoidRootPart.CFrame * CFrame.Angles(0,-math.rad(1),0)).LookVector.Unit*10, Params), -1})
		table.insert(Raycasts, {workspace:Raycast(Model["Right Arm"].Position, (Model.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(1),0)).LookVector.Unit*10, Params), 1})
		table.insert(Raycasts, {workspace:Raycast(Model["Right Arm"].Position, (Model.HumanoidRootPart.CFrame * CFrame.Angles(0,math.rad(2),0)).LookVector.Unit*10, Params), 2})
		table.insert(Raycasts, {workspace:Raycast(Model["Right Arm"].Position, (Model.HumanoidRootPart.CFrame * CFrame.Angles(0,-math.rad(2),0)).LookVector.Unit*10, Params), -2})
		workspace.Filter:ClearAllChildren()
		local ClosestDistance = math.huge
		local ClosestAngle = 0
		local ClosestPos = nil
		for i,v in pairs(Raycasts) do 
			if v[1] then
				local Dist = GetDist(Model, v[1].Position)
				VisualizePosition(v[1].Position)

				if Dist < ClosestDistance then
					ClosestDistance = Dist
					ClosestAngle = v[2]
					ClosestPos = v.Position
				end
			end
		end



		return ClosestAngle

	end


	--strategy that you jump (when you can run away in a straight line) while opponent's lunge is down

	--strategy that you walk around the opponent while running away

	--don't go after the left side if the opponent is hugging the wall
	--don't spam hit while not in range (gives opportunity for enemy to attack while lunge is down)
	--make it go closer when the opponent's attack is on cooldown
	--realize that once it's being attacked, if the opponent is plays optimally it can't dodge so try maneuvers while attacking
	--make it not attempt to back off when it's already being hit
	--back off when lunging Almost over and down

	--detecting when enemy is about to lunge doesn't work



	local GetXDist = function(Pos1, Pos2)
		return math.sqrt((Pos1.X - Pos2.X)^2+(Pos1.Z - Pos2.Z)^2)
	end

	local FairLookAt = function(Pos1, Pos2)
		return CFrame.lookAt(Pos1, (Pos2 - Vector3.new(0,Pos2.Y - Pos1.Y,0))) * CFrame.Angles(0,math.rad(17.5),0)
	end


	Grips = {
		Up = CFrame.new(0, 0, -1.70000005, 0, 0, 1, 1, 0, 0, 0, 1, 0),
		Out = CFrame.new(0, 0, -1.70000005, 0, 1, 0, 1, -0, 0, 0, 0, -1)
	}

	print("DEBUGING")
	local Model = game.Players.LocalPlayer.Character
	print("LINE 203")
	local Humanoid = Model.Humanoid
	print("LINE 205")
	local HumanoidRootPart = Model.HumanoidRootPart
	print("LINE 207")
	local Tool = Model:FindFirstChildOfClass("Tool")
	print("LINE 210")
	if not Tool then 
		repeat Tool = Model:FindFirstChildOfClass("Tool"); wait() until Tool
	end
	print("LINE 203")

	local Tick = 0
	local LastAttack = 0
	local LastOpponentAttack = 0
	local EnemyExtended = false

	local types = "Fighting"

	while true do  --Model.HumanoidRootPart --[[and Humanoid.Health > 0]] and Model.Parent == workspace.ActivePlayers

		pcall(function()
			Tick += game:GetService("RunService").RenderStepped:Wait()
			local ClosestEnemy = Funcs.GetClosestEnemy(Model)

			if ClosestEnemy then 
				local ClosestPart = Funcs.GetClosestPart(Tool.Handle.Position, ClosestEnemy)
				local EnemyTool = ClosestEnemy:FindFirstChildOfClass("Tool")

				local LungeCooldown = false
				if EnemyTool then 
					if EnemyTool.Grip == Grips.Out then
						if EnemyExtended == false then 
							LastOpponentAttack = Tick
						end
						EnemyExtended = true
					end
				end
				if Tool.Grip ~= Grips.Out then
					LungeCooldown = true
				end

				local HigherHp = Model.Humanoid.Health > ClosestEnemy.Humanoid.Health
				local LowerHp = Model.Humanoid.Health < ClosestEnemy.Humanoid.Health
				local XDist = GetXDist(Model.HumanoidRootPart.Position, ClosestEnemy.HumanoidRootPart.Position)

				local Distance = Funcs.GetDistance(Model, ClosestEnemy)
				local HeightDifference = math.abs(ClosestEnemy.HumanoidRootPart.Position.Y - Model.HumanoidRootPart.Position.Y)

				local SameHeight = HeightDifference < 3

				local ClosestPos = ClosestEnemy.HumanoidRootPart.Position
				--LungingGui.BackgroundColor3 = EnemyExtended and Color3.new(0.0470588, 1, 0) or Color3.new(1, 1, 1)

				if EnemyExtended and LungeCooldown and SameHeight and Distance > 6 and EnemyTool then 
					--Tool.Grip = Grips.Up

					Model.HumanoidRootPart.CFrame = (FairLookAt(HumanoidRootPart.Position, EnemyTool.Handle.Position+ ClosestEnemy.HumanoidRootPart.CFrame.LookVector*EnemyTool.Handle.Size.Y*2.2))
				else 
					if Tool.Parent ~= Model then
						Tool:Activate()
					end
					Tool.Parent = Model

					Model.HumanoidRootPart.CFrame = (CFrame.lookAt(HumanoidRootPart.Position, (ClosestPart.Position - Vector3.new(0,ClosestPart.Position.Y - HumanoidRootPart.Position.Y,0))) * CFrame.Angles(0,math.rad(17.5),0))
					local Angle = 0
					local LastAngle = Angle
					--points sword towards closest position on part
					for i = 1, 10 do
						Angle = Angle + Funcs.FindBestAngle(Model, ClosestEnemy, EnemyTool)
						if LastAngle == Angle then 
							-- the wiggle to trigger touched
							if HigherHp then
								Angle += math.random(-10,10)
							else 
								Angle += math.random(-2,2)
							end
							Model.HumanoidRootPart.CFrame = (CFrame.lookAt(HumanoidRootPart.Position, (ClosestPart.Position - Vector3.new(0,ClosestPart.Position.Y - HumanoidRootPart.Position.Y,0))) * CFrame.Angles(0,math.rad(17.5 + Angle),0))
							break
						end
						LastAngle = Angle
						Model.HumanoidRootPart.CFrame = (CFrame.lookAt(HumanoidRootPart.Position, (ClosestPart.Position - Vector3.new(0,ClosestPart.Position.Y - HumanoidRootPart.Position.Y,0))) * CFrame.Angles(0,math.rad(17.5 + Angle),0))
					end
				end 

				local EnemyToModelVector = (Model.HumanoidRootPart.Position - ClosestEnemy.HumanoidRootPart.Position).Unit
				local MoveDirection = ClosestEnemy.Humanoid.MoveDirection
				local EnemyIsMovingTowardsModel = (EnemyToModelVector - MoveDirection).Magnitude < 1
				--goes really aggresive when enemy is on cooldown
				local IdealDistance = EnemyExtended and 8 or 7
				--backs off
				IdealDistance += EnemyIsMovingTowardsModel and 2 or 0


				--detects when last lunged
				--and (Tick - LastAttack > 0.2) -- putting this here for science
				if Tool.Enabled and Tool.Grip == Grips.Up then

					LastAttack = Tick
				end

				--pushes when enemy is about to run out of lunge (hopefully)
				if EnemyTool and not EnemyTool.Enabled and (Tick - LastOpponentAttack > 0.1) and not (Tick - LastOpponentAttack < 0.2) and  (Tick - LastAttack > 0.05) then 
					IdealDistance -= 2
				end

				--LungingGui.BackgroundColor3 = Color3.new(1, 1, 1)
				--backs off when about to stop lunging
				if (Tick - LastAttack > 0.5) then
					--LungingGui.BackgroundColor3 = Color3.new(0.0470588, 1, 0) 

					IdealDistance += 2
				end


				if XDist < 15 then
					Tool:Activate()
				end

				if Distance > 8 then
					if LowerHp then 
						IdealDistance += 10
					end
				end


				--local SpacedPosition = ClosestEnemy.HumanoidRootPart.Position - (ClosestEnemy.HumanoidRootPart.Position - HumanoidRootPart.Position).Unit*IdealDistance

				local Offset = -ClosestEnemy.HumanoidRootPart.CFrame.RightVector
				local SideCast = Funcs.SideCast(ClosestEnemy)


				if HigherHp and SameHeight then 
					Offset*= 3
					IdealDistance = 2
				end

				if SideCast or Tool.Grip == Grips.Up then 
					Offset = Vector3.new(0,0,0)
				end

				--using closestpos could be counterintuitive because it uses the root part's magnitude (so it's simpler to calculate range) but it gets applied to the closest part which might not work in all situations
				--favoring the side without the sword
				local SpacedPosition = (ClosestPos - (ClosestPos - HumanoidRootPart.Position).Unit*IdealDistance) + Offset
				if HigherHp then 
					Offset*= 3
					--SpacedPosition = ClosestEnemy["Left Arm"].Position  + Offset
				end


				if Distance < IdealDistance then 
					local RetreatPos = Funcs.GetRetreatDirection(Model, ClosestEnemy,10)
					if RetreatPos and EnemyIsMovingTowardsModel then 
						RetreatPos = Funcs.GetRetreatDirection(Model, ClosestEnemy,100)
						Humanoid:MoveTo(RetreatPos)
						print("Retreating!!!")
					else
						Humanoid:MoveTo(SpacedPosition)
						print("Moving!!!")
					end
				else 
					Humanoid:MoveTo(SpacedPosition)
					print("Moving!!!")
				end

			end
		end)
	end
	print("RIP")
end)
